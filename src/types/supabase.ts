/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/apps": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.apps.id"];
          belongs_to_organization?: parameters["rowFilter.apps.belongs_to_organization"];
          app_name?: parameters["rowFilter.apps.app_name"];
          target_platform?: parameters["rowFilter.apps.target_platform"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["apps"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** apps */
          apps?: definitions["apps"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.apps.id"];
          belongs_to_organization?: parameters["rowFilter.apps.belongs_to_organization"];
          app_name?: parameters["rowFilter.apps.app_name"];
          target_platform?: parameters["rowFilter.apps.target_platform"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.apps.id"];
          belongs_to_organization?: parameters["rowFilter.apps.belongs_to_organization"];
          app_name?: parameters["rowFilter.apps.app_name"];
          target_platform?: parameters["rowFilter.apps.target_platform"];
        };
        body: {
          /** apps */
          apps?: definitions["apps"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/organizations": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.organizations.id"];
          name?: parameters["rowFilter.organizations.name"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["organizations"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** organizations */
          organizations?: definitions["organizations"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.organizations.id"];
          name?: parameters["rowFilter.organizations.name"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.organizations.id"];
          name?: parameters["rowFilter.organizations.name"];
        };
        body: {
          /** organizations */
          organizations?: definitions["organizations"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/platforms": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.platforms.id"];
          name?: parameters["rowFilter.platforms.name"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["platforms"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** platforms */
          platforms?: definitions["platforms"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.platforms.id"];
          name?: parameters["rowFilter.platforms.name"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.platforms.id"];
          name?: parameters["rowFilter.platforms.name"];
        };
        body: {
          /** platforms */
          platforms?: definitions["platforms"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/test_run_events": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.test_run_events.id"];
          belongs_to_app?: parameters["rowFilter.test_run_events.belongs_to_app"];
          stage?: parameters["rowFilter.test_run_events.stage"];
          belongs_to_test_run?: parameters["rowFilter.test_run_events.belongs_to_test_run"];
          status?: parameters["rowFilter.test_run_events.status"];
          event_timestamp?: parameters["rowFilter.test_run_events.event_timestamp"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["test_run_events"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** test_run_events */
          test_run_events?: definitions["test_run_events"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.test_run_events.id"];
          belongs_to_app?: parameters["rowFilter.test_run_events.belongs_to_app"];
          stage?: parameters["rowFilter.test_run_events.stage"];
          belongs_to_test_run?: parameters["rowFilter.test_run_events.belongs_to_test_run"];
          status?: parameters["rowFilter.test_run_events.status"];
          event_timestamp?: parameters["rowFilter.test_run_events.event_timestamp"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.test_run_events.id"];
          belongs_to_app?: parameters["rowFilter.test_run_events.belongs_to_app"];
          stage?: parameters["rowFilter.test_run_events.stage"];
          belongs_to_test_run?: parameters["rowFilter.test_run_events.belongs_to_test_run"];
          status?: parameters["rowFilter.test_run_events.status"];
          event_timestamp?: parameters["rowFilter.test_run_events.event_timestamp"];
        };
        body: {
          /** test_run_events */
          test_run_events?: definitions["test_run_events"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/test_runs": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.test_runs.id"];
          test_run_started?: parameters["rowFilter.test_runs.test_run_started"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["test_runs"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** test_runs */
          test_runs?: definitions["test_runs"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.test_runs.id"];
          test_run_started?: parameters["rowFilter.test_runs.test_run_started"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.test_runs.id"];
          test_run_started?: parameters["rowFilter.test_runs.test_run_started"];
        };
        body: {
          /** test_runs */
          test_runs?: definitions["test_runs"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/test_stages": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.test_stages.id"];
          stage_name?: parameters["rowFilter.test_stages.stage_name"];
          stage_description?: parameters["rowFilter.test_stages.stage_description"];
          code?: parameters["rowFilter.test_stages.code"];
          stage_enabled?: parameters["rowFilter.test_stages.stage_enabled"];
          next_stage?: parameters["rowFilter.test_stages.next_stage"];
          valid_statuses?: parameters["rowFilter.test_stages.valid_statuses"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["test_stages"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** test_stages */
          test_stages?: definitions["test_stages"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.test_stages.id"];
          stage_name?: parameters["rowFilter.test_stages.stage_name"];
          stage_description?: parameters["rowFilter.test_stages.stage_description"];
          code?: parameters["rowFilter.test_stages.code"];
          stage_enabled?: parameters["rowFilter.test_stages.stage_enabled"];
          next_stage?: parameters["rowFilter.test_stages.next_stage"];
          valid_statuses?: parameters["rowFilter.test_stages.valid_statuses"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.test_stages.id"];
          stage_name?: parameters["rowFilter.test_stages.stage_name"];
          stage_description?: parameters["rowFilter.test_stages.stage_description"];
          code?: parameters["rowFilter.test_stages.code"];
          stage_enabled?: parameters["rowFilter.test_stages.stage_enabled"];
          next_stage?: parameters["rowFilter.test_stages.next_stage"];
          valid_statuses?: parameters["rowFilter.test_stages.valid_statuses"];
        };
        body: {
          /** test_stages */
          test_stages?: definitions["test_stages"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/users": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.users.id"];
          belongs_to_organization?: parameters["rowFilter.users.belongs_to_organization"];
          name?: parameters["rowFilter.users.name"];
          can_upload_apps?: parameters["rowFilter.users.can_upload_apps"];
          can_add_users_to_org?: parameters["rowFilter.users.can_add_users_to_org"];
          email?: parameters["rowFilter.users.email"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["users"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** users */
          users?: definitions["users"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.users.id"];
          belongs_to_organization?: parameters["rowFilter.users.belongs_to_organization"];
          name?: parameters["rowFilter.users.name"];
          can_upload_apps?: parameters["rowFilter.users.can_upload_apps"];
          can_add_users_to_org?: parameters["rowFilter.users.can_add_users_to_org"];
          email?: parameters["rowFilter.users.email"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.users.id"];
          belongs_to_organization?: parameters["rowFilter.users.belongs_to_organization"];
          name?: parameters["rowFilter.users.name"];
          can_upload_apps?: parameters["rowFilter.users.can_upload_apps"];
          can_add_users_to_org?: parameters["rowFilter.users.can_add_users_to_org"];
          email?: parameters["rowFilter.users.email"];
        };
        body: {
          /** users */
          users?: definitions["users"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/rpc/handle_new_user": {
    post: {
      parameters: {
        body: {
          args: { [key: string]: unknown };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
}

export interface definitions {
  apps: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    /**
     * Note:
     * This is a Foreign Key to `organizations.id`.<fk table='organizations' column='id'/>
     */
    belongs_to_organization: string;
    app_name: string;
    /**
     * Note:
     * This is a Foreign Key to `platforms.id`.<fk table='platforms' column='id'/>
     */
    target_platform: {
      name: string;
    };
  };
  organizations: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    name: string;
  };
  platforms: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    name: string;
  };
  test_run_events: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    /**
     * Note:
     * This is a Foreign Key to `apps.id`.<fk table='apps' column='id'/>
     */
    belongs_to_app: string;
    /**
     * Note:
     * This is a Foreign Key to `test_stages.id`.<fk table='test_stages' column='id'/>
     */
    stage: string;
    /**
     * Note:
     * This is a Foreign Key to `test_runs.id`.<fk table='test_runs' column='id'/>
     */
    belongs_to_test_run: string;
    status: "preparing" | "processing" | "successful" | "failed";
    event_timestamp: string;
  };
  test_runs: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    test_run_started: string;
    belongs_to_app: string;
    test_screenshots: any;
  };
  test_stages: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    stage_name: string;
    stage_description: string;
    code: string;
    stage_enabled: boolean;
    /**
     * Note:
     * This is a Foreign Key to `test_stages.id`.<fk table='test_stages' column='id'/>
     */
    next_stage?: string;
    valid_statuses: string;
  };
  users: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    /**
     * Note:
     * This is a Foreign Key to `organizations.id`.<fk table='organizations' column='id'/>
     */
    belongs_to_organization?: string;
    organizations?: { id: string; name: string };
    name?: string;
    can_upload_apps?: boolean;
    can_add_users_to_org?: boolean;
    email?: string;
  };
}

export interface parameters {
  /** Preference */
  preferParams: "params=single-object";
  /** Preference */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /** Preference */
  preferCount: "count=none";
  /** Filtering Columns */
  select: string;
  /** On Conflict */
  on_conflict: string;
  /** Ordering */
  order: string;
  /** Limiting and Pagination */
  range: string;
  /** Limiting and Pagination */
  rangeUnit: string;
  /** Limiting and Pagination */
  offset: string;
  /** Limiting and Pagination */
  limit: string;
  /** apps */
  "body.apps": definitions["apps"];
  "rowFilter.apps.id": string;
  "rowFilter.apps.belongs_to_organization": string;
  "rowFilter.apps.app_name": string;
  "rowFilter.apps.target_platform": string;
  /** organizations */
  "body.organizations": definitions["organizations"];
  "rowFilter.organizations.id": string;
  "rowFilter.organizations.name": string;
  /** platforms */
  "body.platforms": definitions["platforms"];
  "rowFilter.platforms.id": string;
  "rowFilter.platforms.name": string;
  /** test_run_events */
  "body.test_run_events": definitions["test_run_events"];
  "rowFilter.test_run_events.id": string;
  "rowFilter.test_run_events.belongs_to_app": string;
  "rowFilter.test_run_events.stage": string;
  "rowFilter.test_run_events.belongs_to_test_run": string;
  "rowFilter.test_run_events.status": string;
  "rowFilter.test_run_events.event_timestamp": string;
  /** test_runs */
  "body.test_runs": definitions["test_runs"];
  "rowFilter.test_runs.id": string;
  "rowFilter.test_runs.test_run_started": string;
  /** test_stages */
  "body.test_stages": definitions["test_stages"];
  "rowFilter.test_stages.id": string;
  "rowFilter.test_stages.stage_name": string;
  "rowFilter.test_stages.stage_description": string;
  "rowFilter.test_stages.code": string;
  "rowFilter.test_stages.stage_enabled": string;
  "rowFilter.test_stages.next_stage": string;
  "rowFilter.test_stages.valid_statuses": string;
  /** users */
  "body.users": definitions["users"];
  "rowFilter.users.id": string;
  "rowFilter.users.belongs_to_organization": string;
  "rowFilter.users.name": string;
  "rowFilter.users.can_upload_apps": string;
  "rowFilter.users.can_add_users_to_org": string;
  "rowFilter.users.email": string;
}

export interface operations {}

export interface external {}
